_format_version: "3.0"
_transform: true

# JWT Consumer with Keycloak Public Key
consumers:
  - username: keycloak-issuer
    jwt_secrets:
      - key: "http://47.129.40.37:8080/realms/demo"
        algorithm: RS256
        rsa_public_key: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvJCXzONTo7xpT5/fFSU2
          x+9OdAkxBw6rHVzgaIPlBbFOLevZdWlKqefxFZELM3np9vPbsGWRHn1BQsQlxpr8
          uyjDoM2jAu68sVfo9qiZBnTZNkvNPr4o1yJzZQExyK4N8zw+4B6gIX2UTCibYMcJ
          AunwkhprlxrYZp2QrVdlIo/d3lnkb8TDdB3koKMOUE+Nqau03t18c6Hr6qz2MyO+
          Mg8LfkmAKHupw1njWq72ToCByw9AUMSFPbbfDZKfcBTbcDHwEO8At7KHSnhSAC7n
          IgaN3bWiv1GYOoPfuyGjSVm2ca9Vle01tO3Tf6DC5qvFU95D00Xn4OpHxqsOzkE+
          7wIDAQAB
          -----END PUBLIC KEY-----

# Global Plugins
plugins:
  - name: http-log
    config:
      http_endpoint: "http://47.129.40.37:8081/kong"
      method: "POST"
      timeout: 10000
      keepalive: 60000
      flush_timeout: 2
      retry_count: 3
      queue_size: 1000

services:
  # Login Service - Public endpoint with rate limiting and schema validation
  - name: auth-service
    url: http://47.129.40.37:3000
    routes:
      - name: login-route
        paths: ["/auth/login"]
        strip_path: false
        methods: ["POST"]
        plugins:
          # Schema validation implemented via embedded Lua
          - name: pre-function
            config:
              access:
                - |
                  local cjson = require "cjson.safe"
                  local raw_body = kong.request.get_raw_body()
                  if not raw_body or raw_body == "" then
                    return kong.response.exit(400, { message = "Payload required" })
                  end
                  local body, err = cjson.decode(raw_body)
                  if not body then
                    return kong.response.exit(400, { message = "Payload must be valid JSON" })
                  end
                  if type(body.username) ~= "string" or type(body.password) ~= "string" then
                    return kong.response.exit(400, { message = "Username and password must be strings" })
                  end
                  local username_len = #body.username
                  local password_len = #body.password
                  if username_len < 3 or username_len > 50 or password_len < 6 or password_len > 100 then
                    return kong.response.exit(400, { message = "Invalid credential format" })
                  end
          # Aggressive Rate Limiting for Brute-Force Protection
          - name: rate-limiting
            config:
              second: 5
              minute: 60
              policy: local
              fault_tolerant: true
              hide_client_headers: false
          # Request Size Limiting
          - name: request-size-limiting
            config:
              allowed_payload_size: 1

  # Protected API Service - Requires JWT Authentication
  - name: user-service
    url: http://47.129.40.37:3000
    routes:
      - name: user-api-route
        paths: ["/api"]
        strip_path: false
        methods: ["GET", "POST", "PUT", "DELETE"]
        plugins:
          # JWT Authentication - Verify token from Keycloak
          - name: jwt
            config:
              key_claim_name: iss
              claims_to_verify:
                - exp
              run_on_preflight: true
              maximum_expiration: 3600
          # Rate Limiting for API protection
          - name: rate-limiting
            config:
              minute: 100
              policy: local
              fault_tolerant: true
