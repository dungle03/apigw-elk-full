services:
  kong:
    image: kong/kong-gateway:3.7
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PLUGINS: bundled,oidc
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
    volumes:
      - ./kong/kong.yml:/kong/kong.yml:ro
      - ./usersvc/openapi.yml:/kong/specs/openapi.yml:ro
    depends_on:
      usersvc:
        condition: service_started
      keycloak:
        condition: service_healthy
      logstash:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 256M

  usersvc:
    build: ./usersvc
    ports: [ "3000:3000" ]
    environment:
      KEYCLOAK_REALM_URL: http://keycloak:8080/realms/demo
    deploy:
      resources:
        limits:
          memory: 256M

  keycloak-db:
    image: postgres:15
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - keycloak-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak -d keycloak" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M

  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    command: [ "start-dev", "--import-realm", "--health-enabled=true" ]
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      JAVA_OPTS: "-Xms256m -Xmx512m"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm.json:ro
    ports: [ "8080:8080" ]
    depends_on:
      keycloak-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "/opt/keycloak/bin/kc.sh", "tools", "health", "--fail-on-critical" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 768M

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms256m -Xmx512m
    ports: [ "9200:9200" ]
    volumes: [ esdata:/usr/share/elasticsearch/data ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s" ]
      interval: 10s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 768M

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.2
    ports: [ "8081:8081" ]
    volumes:
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
    deploy:
      resources:
        limits:
          memory: 512M

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.2
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - NODE_OPTIONS=--max-old-space-size=512
    ports: [ "5601:5601" ]
    depends_on:
      elasticsearch:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 768M

volumes:
  keycloak-db:
  esdata:
